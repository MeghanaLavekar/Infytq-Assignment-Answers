 A train is identified by its name and list of compartments.
The compartments are identified by its name,total seating capacity and the number of passengers.
Implement the class Train as given in the class diagram.
Train
- train_name
- compartment_list
__init__(train_name,compartment_list)
+ get_train_name()
+ get_compartment_list()
+ count_compartments ()
+ check_vacancy()

Write a python program to implement the following:

    count_compartments()- returns the total number of compartments in the train
    check_vacancy()-returns the count of the compartments in which more than 50% of the seats are vacant

Note : Compartment list is maintained as a linked list where data in each node refers to a compartment. 

-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

#DSA-Assgn-10
class Node:
    def __init__(self,data):
        self.__data=data
        self.__next=None

    def get_data(self):
        return self.__data

    def set_data(self,data):
        self.__data=data

    def get_next(self):
        return self.__next

    def set_next(self,next_node):
        self.__next=next_node


class LinkedList:
    def __init__(self):
        self.__head=None
        self.__tail=None

    def get_head(self):
        return self.__head

    def get_tail(self):
        return self.__tail


    def add(self,data):
        new_node=Node(data)
        if(self.__head is None):
            self.__head=self.__tail=new_node
        else:
            self.__tail.set_next(new_node)
            self.__tail=new_node

    def insert(self,data,data_before):
        new_node=Node(data)
        if(data_before==None):
            new_node.set_next(self.__head)
            self.__head=new_node
            if(new_node.get_next()==None):
                self.__tail=new_node

        else:
            node_before=self.find_node(data_before)
            if(node_before is not None):
                new_node.set_next(node_before.get_next())
                node_before.set_next(new_node)
                if(new_node.get_next() is None):
                    self.__tail=new_node
            else:
                print(data_before,"is not present in the Linked list")

    def display(self):
        temp=self.__head
        while(temp is not None):
            print(temp.get_data())
            temp=temp.get_next()


    def find_node(self,data):
        temp=self.__head
        while(temp is not None):
            if(temp.get_data()==data):
                return temp
            temp=temp.get_next()
        return None

    def delete(self,data):
        node=self.find_node(data)
        if(node is not None):
            if(node==self.__head):
                if(self.__head==self.__tail):
                    self.__tail=None
                self.__head=node.get_next()
            else:
                temp=self.__head
                while(temp is not None):
                    if(temp.get_next()==node):
                        temp.set_next(node.get_next())
                        if(node==self.__tail):
                            self.__tail=temp
                        node.set_next(None)
                        break
                    temp=temp.get_next()
        else:
            print(data,"is not present in Linked list")

    #You can use the below __str__() to print the elements of the DS object while debugging
    def __str__(self):
        temp=self.__head
        msg=[]
        while(temp is not None):
            msg.append(str(temp.get_data()))
            temp=temp.get_next()
        msg=" ".join(msg)
        msg="Linkedlist data(Head to Tail): "+ msg
        return msg

class Compartment:
    def __init__(self,compartment_name,no_of_passengers,total_seats):
        self.__compartment_name=compartment_name
        self.__no_of_passengers=no_of_passengers
        self.__total_seats=total_seats
        
    def get_compartment_name(self):
        return self.__compartment_name
    
    def get_no_of_passengers(self):
        return self.__no_of_passengers
    
    def get_total_seats(self):
        return self.__total_seats
        
class Train:
    def __init__(self,train_name,compartment_list): 
        self.__train_name=train_name 
        self.__compartment_list=compartment_list
    
    #Implement the remaining methods of Train class here

    def get_train_name(self):
        return self.__train_name
        
    def get_compartment_list(self):
        return self.__compartment_list
        
    def count_compartments (self):
        c=0
        temp=self.__compartment_list.get_head()
        while temp is not None:
            c+=1
            temp=temp.get_next()
        return c
        
                
    def check_vacancy(self):
        c=0
        temp=self.__compartment_list.get_head()
        while temp is not None:
            if temp.get_data().get_no_of_passengers() >= (temp.get_data().get_total_seats())//2:
                c+=1
            temp=temp.get_next()
        return c
    
#Use different values for compartment and test your program    
compartment1=Compartment("SL",250,400)   
compartment2=Compartment("2AC",125,280)   
compartment3=Compartment("3AC",120,300)
compartment4=Compartment("FC",160,300)
compartment5=Compartment("1AC",100,210)
compartment_list=LinkedList()
compartment_list.add(compartment1)
compartment_list.add(compartment2)
compartment_list.add(compartment3)
compartment_list.add(compartment4)
compartment_list.add(compartment5)
train1=Train("Shatabdi",compartment_list)
count=train1.count_compartments()
print("The number of compartments in the train:",count)
vacancy_count=train1.check_vacancy()
print("The number of compartments which have more than 50% vacancy:",vacancy_count)
                                                    
