Given a stack with strings, A through E, in alphabetical order with "A" on top.

Write a python function to accept the given stack and perform the following:

The bottom three elements should be simultaneously removed and placed on top with their vertical order maintained and it should return the updated input stack.

Input stack (top->bottom): A,B,C,D,E
Output stack (top->bottom) :C,D,E,A,B

--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

#DSA-Assgn-29
class Queue:
    def __init__(self,max_size):

        self.__max_size=max_size
        self.__elements=[None]*self.__max_size
        self.__rear=-1
        self.__front=0

    def is_full(self):
        if(self.__rear==self.__max_size-1):
                return True
        return False

    def is_empty(self):
        if(self.__front>self.__rear):
            return True
        return False

    def enqueue(self,data):
        if(self.is_full()):
            print("Queue is full!!!")
        else:
            self.__rear+=1
            self.__elements[self.__rear]=data

    def dequeue(self):
        if(self.is_empty()):
            print("Queue is empty!!!")
        else:
            data=self.__elements[self.__front]
            self.__front+=1
            return data

    def display(self):
        for index in range(self.__front, self.__rear+1):
            print(self.__elements[index])


    def get_max_size(self):
        return self.__max_size

    #You can use the below __str__() to print the elements of the DS object while debugging
    def __str__(self):
        msg=[]
        index=self.__front
        while(index<=self.__rear):
            msg.append((str)(self.__elements[index]))
            index+=1
        msg=" ".join(msg)
        msg="Queue data(Front to Rear): "+msg
        return msg

class Stack:
    def __init__(self,max_size):
        self.__max_size=max_size
        self.__elements=[None]*self.__max_size
        self.__top=-1

    def is_full(self):
        if(self.__top==self.__max_size-1):
            return True
        return False

    def is_empty(self):
        if(self.__top==-1):
            return True
        return False

    def push(self,data):
        if(self.is_full()):
            print("The stack is full!!")
        else:
            self.__top+=1
            self.__elements[self.__top]=data

    def pop(self):
        if(self.is_empty()):
            print("The stack is empty!!")
        else:
            data= self.__elements[self.__top]
            self.__top-=1
            return data

    def display(self):
        if(self.is_empty()):
            print("The stack is empty")
        else:
            index=self.__top
            while(index>=0):
                print(self.__elements[index])
                index-=1

    def get_max_size(self):
        return self.__max_size

    #You can use the below __str__() to print the elements of the DS object while debugging
    def __str__(self):
        msg=[]
        index=self.__top
        while(index>=0):
            msg.append((str)(self.__elements[index]))
            index-=1
        msg=" ".join(msg)
        msg="Stack data(Top to Bottom): "+msg
        return msg

def stack_operation(input_stack):
    #Remove pass and write your logic here
    n=input_stack.get_max_size()
    s=n-3
    l=[]
    
    for i in range(n):
        l.append(input_stack.pop())
    
    q1=Stack(s)
    for i in range(0,s):
        q1.push(l[i])
    
    q2=Stack(3)
    for i in range(s,n):
        q2.push(l[i])
    
    stack=Stack(n)
    for i in range(n):
        t1=q1.pop()
        if t1 != None:
            stack.push(t1)
        else:
            t2=q2.pop()
            if t2 == None:
                break
            stack.push(t2)
    return stack    

#Pass different values of stack to the function and test your program
input_stack=Stack(5)
input_stack.push('E')
input_stack.push('D')
input_stack.push('C')
input_stack.push('B')
input_stack.push('A')
 
print("The elements in input stack are:")
input_stack.display()
print()
updated_stack=stack_operation(input_stack)
print("The elements in the updated stack are:")
updated_stack.display()
                                                    
