
In a sequence of characters, a letter means en-queue and an asterisk means de-queue.
Write a python function which accepts the given sequence and returns the string obtained by de-queuing.

Sample Input 					Expected Output
I*TS** A **BE***AUT**IF**UL** D**AY*** 		ITS A BEAUTIFUL DAY
E*NE**M*Y S***HI**P*S* O**N T***H*E W***AY** 	ENEMY SHIPS ON THE WAY

--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

#DSA-Prac-8
class Queue:
    def __init__(self,max_size):
        
        self.__max_size=max_size
        self.__elements=[None]*self.__max_size
        self.__rear=-1
        self.__front=0
    
    def is_full(self):
        if(self.__rear==self.__max_size-1):
                return True
        return False
    
    def is_empty(self):
        if(self.__front>self.__rear):
            return True
        return False
    
    def enqueue(self,data):
        if(self.is_full()):
            print("Queue is full!!!")
        else:
            self.__rear+=1
            self.__elements[self.__rear]=data
    
    def dequeue(self):
        if(self.is_empty()):
            print("Queue is empty!!!")
        else:
            data=self.__elements[self.__front]
            self.__front+=1
            return data
    
    def display(self):
        for index in range(self.__front, self.__rear+1):
            print(self.__elements[index])
    
    
    def get_max_size(self):
        return self.__max_size
    
    #You can use the below __str__() to print the elements of the DS object while debugging
    def __str__(self):
        msg=[]
        index=self.__front
        while(index<=self.__rear):
            msg.append((str)(self.__elements[index]))
            index+=1
        msg=" ".join(msg)
        msg="Queue data(Front to Rear): "+msg
        return msg   

def create_seqeunce(message):  
    #start writing your code here
    q=Queue(len(message))
    for i in message:
        if i == "*":
            continue
        else:
            q.enqueue(i)
    m=""
    for i in range(q.get_max_size()):
        s=q.dequeue()
        if s == None:
            break
        m+=s
    return m
        

print(create_seqeunce("E*NE**M*Y S***HI**P*S* O**N T***H*E W***AY**"))

