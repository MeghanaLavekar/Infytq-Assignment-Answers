
An apparel shop wants to manage the items which it sells.

Class Description:
Apparel class:

    Initialize static variable counter to 100
    In the constructor, auto-generate item_id starting from 101 prefixed by "C" for cotton apparels and "S" for silk apparels. Example â€“ C101, S102, S103, C104 etc.
    calculate_price(): Add 5% service tax on the price of the apparel and update attribute, price with the new value

Cotton class:

    While invoking parent constructor from child constructor, pass "Cotton" as item_type
    calculate_price(): Update attribute, price of Apparel class based on rules given below
        Add service tax on price by invoking appropriate method of Apparel class
        Apply discount on price
        Add 5% VAT on final price

Silk class:

    While invoking parent constructor from child constructor, pass "Silk" as item_type
    calculate_price(): Update attribute, price of Apparel class based on rules given below
        Add service tax on price by invoking appropriate method of Apparel class
        Identify points earned based on rules given below:
            Silk apparels with price more than Rs. 10000, earn 10 points and anything less than or equal to that earn 3 points 
        Initialize attribute, points with the identified points
        Add 10% VAT on price

Note: Perform case sensitive string comparison 

For testing:

    Create objects of Cotton class and Silk class
    Invoke calculate_price() on Cotton objects and Silk objects
    Display their details

---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

*********************** MY PROGRAM USING SUPER() *****************************************

#OOPR-Assgn-24
#Start writing your code here

class Apparel:
    counter=100
    def __init__(self,price,item_type):
        self.__item_type=item_type
        self.__price=price
        Apparel.counter+=1
        self.__item_id=item_type[0].upper()+str(Apparel.counter)
    def calculate_price(self):
        self.__price=self.__price*1.05
    def get_item_id(self):
        return self.__item_id
    def get_price(self):
        return self.__price
    def get_item_type(self):
        return self.__item_type
    def set_price(self,price):
        self.__price=price
        
class Cotton(Apparel):
    def __init__(self,price,discount):
        super().__init__(price,"cotton")
        self.__discount=discount
    
    def calculate_price(self):
        super().calculate_price()
        price=super().get_price()
        price=price-((self.__discount)/100)*price
        price=price * (1.05)
        super().set_price(price)
        
    def get_discount(self):
        self.__discount=discount
        
class Silk(Apparel):
    def __init__(self,price):
        self.__points=0
        super().__init__(price,"silk")
    
    def calculate_price(self):
        super().calculate_price()
        price=super().get_price()
        if price > 10000:
            self.__points+=10
        if price <= 10000:
            self.__points+=3
        price=price * (1.10)
        super().set_price(price)
    
    def get_points(self):
        return self.__points
        
a = Silk(1320)
a.calculate_price()
print(a.get_price())
        

******************************************** ANOTHER ONE USING PARENT CLASSNAME *****************************************************
#OOPR-Assgn-24
class Apparel:
    counter=100
    def __init__(self, price, item_type):
        self.__item_id=item_type[0].upper()+str(Apparel.counter+1)
        self.__price=price
        self.__item_type=item_type.title()
        Apparel.counter+=1
    def get_item_id(self):
        return self.__item_id
    def get_item_type(self):
        return self.__item_type
    def get_price(self):
        return self.__price
    def calculate_price(self):
        self.__price *=  1.05
    def set_price(self, price):
        self.__price=price
class Cotton(Apparel):
    def __init__(self, price,discount):
        Apparel.__init__(self, price, "Cotton")
        self.__discount = discount
    def calculate_price(self):
        Apparel.calculate_price(self)
        price = Apparel.get_price(self)
        price *= (1-((self.__discount)/100))
        price *= (1.05)
        Apparel.set_price(self, price)
    def get_discount(self):
        return self.__discount
class Silk(Apparel):
    def __init__(self, price):
        Apparel.__init__(self, price, "Silk")
        self.__points=0
    def calculate_price(self):
        Apparel.calculate_price(self)
        price = self.get_price()
        if price >10000:
            self.__points +=10
        else:
            self.__points += 3
        price = price * 1.10
        Apparel.set_price(self, price)
        
    def get_points(self):
        return self.__points
        
a = Silk(1320)
a.calculate_price()
        

